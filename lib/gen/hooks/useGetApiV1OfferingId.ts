/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  GetApiV1OfferingIdQueryResponse,
  GetApiV1OfferingIdPathParams,
  GetApiV1OfferingId400,
  GetApiV1OfferingId500,
} from '../types/GetApiV1OfferingId.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getApiV1OfferingId } from '../clients/getApiV1OfferingId.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getApiV1OfferingIdQueryKey = (id: GetApiV1OfferingIdPathParams['id']) => [{ url: '/api/v1/offering/:id', params: { id: id } }] as const

export type GetApiV1OfferingIdQueryKey = ReturnType<typeof getApiV1OfferingIdQueryKey>

export function getApiV1OfferingIdQueryOptions(id: GetApiV1OfferingIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getApiV1OfferingIdQueryKey(id)
  return queryOptions<
    GetApiV1OfferingIdQueryResponse,
    ResponseErrorConfig<GetApiV1OfferingId400 | GetApiV1OfferingId500>,
    GetApiV1OfferingIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiV1OfferingId(id, config)
    },
  })
}

/**
 * @description 根据 Offering ID，从 MinIO 获取文件并以流的形式返回，可分块传输。
 * @summary 下载指定 ID 的 Offering 文件
 * {@link /api/v1/offering/:id}
 */
export function useGetApiV1OfferingId<
  TData = GetApiV1OfferingIdQueryResponse,
  TQueryData = GetApiV1OfferingIdQueryResponse,
  TQueryKey extends QueryKey = GetApiV1OfferingIdQueryKey,
>(
  id: GetApiV1OfferingIdPathParams['id'],
  options: {
    query?: Partial<
      QueryObserverOptions<GetApiV1OfferingIdQueryResponse, ResponseErrorConfig<GetApiV1OfferingId400 | GetApiV1OfferingId500>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getApiV1OfferingIdQueryKey(id)

  const query = useQuery(
    {
      ...getApiV1OfferingIdQueryOptions(id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetApiV1OfferingId400 | GetApiV1OfferingId500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}