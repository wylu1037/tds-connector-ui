/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  PutUsersIdMutationRequest,
  PutUsersIdMutationResponse,
  PutUsersIdPathParams,
  PutUsersId400,
  PutUsersId404,
  PutUsersId500,
} from '../types/PutUsersId.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { putUsersId } from '../clients/putUsersId.ts'
import { useMutation } from '@tanstack/react-query'

export const putUsersIdMutationKey = () => [{ url: '/users/:id' }] as const

export type PutUsersIdMutationKey = ReturnType<typeof putUsersIdMutationKey>

/**
 * @description 根据用户ID更新用户信息
 * @summary 更新用户信息
 * {@link /users/:id}
 */
export function usePutUsersId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutUsersIdMutationResponse,
      ResponseErrorConfig<PutUsersId400 | PutUsersId404 | PutUsersId500>,
      { id: PutUsersIdPathParams['id']; data?: PutUsersIdMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PutUsersIdMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? putUsersIdMutationKey()

  return useMutation<
    PutUsersIdMutationResponse,
    ResponseErrorConfig<PutUsersId400 | PutUsersId404 | PutUsersId500>,
    { id: PutUsersIdPathParams['id']; data?: PutUsersIdMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return putUsersId(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}