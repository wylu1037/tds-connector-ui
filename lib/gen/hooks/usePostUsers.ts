/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { PostUsersMutationRequest, PostUsersMutationResponse, PostUsers400, PostUsers500 } from '../types/PostUsers.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { postUsers } from '../clients/postUsers.ts'
import { useMutation } from '@tanstack/react-query'

export const postUsersMutationKey = () => [{ url: '/users' }] as const

export type PostUsersMutationKey = ReturnType<typeof postUsersMutationKey>

/**
 * @description 创建新用户
 * @summary 创建用户
 * {@link /users}
 */
export function usePostUsers<TContext>(
  options: {
    mutation?: UseMutationOptions<PostUsersMutationResponse, ResponseErrorConfig<PostUsers400 | PostUsers500>, { data: PostUsersMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostUsersMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postUsersMutationKey()

  return useMutation<PostUsersMutationResponse, ResponseErrorConfig<PostUsers400 | PostUsers500>, { data: PostUsersMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postUsers(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}