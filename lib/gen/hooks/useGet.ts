/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetQueryResponse } from '../types/Get.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { get } from '../clients/get.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getQueryKey = () => [{ url: '/' }] as const

export type GetQueryKey = ReturnType<typeof getQueryKey>

export function getQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getQueryKey()
  return queryOptions<GetQueryResponse, ResponseErrorConfig<Error>, GetQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return get(config)
    },
  })
}

/**
 * @description 服务欢迎页面和基本信息
 * @summary 根接口
 * {@link /}
 */
export function useGet<TData = GetQueryResponse, TQueryData = GetQueryResponse, TQueryKey extends QueryKey = GetQueryKey>(
  options: {
    query?: Partial<QueryObserverOptions<GetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getQueryKey()

  const query = useQuery(
    {
      ...getQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}