/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetPingQueryResponse } from '../types/GetPing.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getPing } from '../clients/getPing.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getPingQueryKey = () => [{ url: '/ping' }] as const

export type GetPingQueryKey = ReturnType<typeof getPingQueryKey>

export function getPingQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getPingQueryKey()
  return queryOptions<GetPingQueryResponse, ResponseErrorConfig<Error>, GetPingQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getPing(config)
    },
  })
}

/**
 * @description 用于测试服务是否正常运行
 * @summary Ping接口
 * {@link /ping}
 */
export function useGetPing<TData = GetPingQueryResponse, TQueryData = GetPingQueryResponse, TQueryKey extends QueryKey = GetPingQueryKey>(
  options: {
    query?: Partial<QueryObserverOptions<GetPingQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getPingQueryKey()

  const query = useQuery(
    {
      ...getPingQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}