/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetUsersIdQueryResponse, GetUsersIdPathParams, GetUsersId400, GetUsersId404, GetUsersId500 } from '../types/GetUsersId.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getUsersId } from '../clients/getUsersId.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getUsersIdQueryKey = (id: GetUsersIdPathParams['id']) => [{ url: '/users/:id', params: { id: id } }] as const

export type GetUsersIdQueryKey = ReturnType<typeof getUsersIdQueryKey>

export function getUsersIdQueryOptions(id: GetUsersIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getUsersIdQueryKey(id)
  return queryOptions<GetUsersIdQueryResponse, ResponseErrorConfig<GetUsersId400 | GetUsersId404 | GetUsersId500>, GetUsersIdQueryResponse, typeof queryKey>({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUsersId(id, config)
    },
  })
}

/**
 * @description 根据用户ID获取用户详细信息
 * @summary 获取用户信息
 * {@link /users/:id}
 */
export function useGetUsersId<TData = GetUsersIdQueryResponse, TQueryData = GetUsersIdQueryResponse, TQueryKey extends QueryKey = GetUsersIdQueryKey>(
  id: GetUsersIdPathParams['id'],
  options: {
    query?: Partial<
      QueryObserverOptions<GetUsersIdQueryResponse, ResponseErrorConfig<GetUsersId400 | GetUsersId404 | GetUsersId500>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getUsersIdQueryKey(id)

  const query = useQuery(
    {
      ...getUsersIdQueryOptions(id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetUsersId400 | GetUsersId404 | GetUsersId500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}