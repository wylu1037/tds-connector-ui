/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetApiV1OfferingsQueryResponse, GetApiV1Offerings500 } from '../types/GetApiV1Offerings.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { getApiV1Offerings } from '../clients/getApiV1Offerings.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getApiV1OfferingsSuspenseQueryKey = () => [{ url: '/api/v1/offerings' }] as const

export type GetApiV1OfferingsSuspenseQueryKey = ReturnType<typeof getApiV1OfferingsSuspenseQueryKey>

export function getApiV1OfferingsSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getApiV1OfferingsSuspenseQueryKey()
  return queryOptions<GetApiV1OfferingsQueryResponse, ResponseErrorConfig<GetApiV1Offerings500>, GetApiV1OfferingsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiV1Offerings(config)
    },
  })
}

/**
 * @description 返回数据库中所有 Offerings
 * @summary 获取所有 Offerings
 * {@link /api/v1/offerings}
 */
export function useGetApiV1OfferingsSuspense<TData = GetApiV1OfferingsQueryResponse, TQueryKey extends QueryKey = GetApiV1OfferingsSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetApiV1OfferingsQueryResponse, ResponseErrorConfig<GetApiV1Offerings500>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getApiV1OfferingsSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...getApiV1OfferingsSuspenseQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetApiV1Offerings500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}